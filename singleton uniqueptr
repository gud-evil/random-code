#include <iostream>
#include <memory>
#include <mutex>

// Singleton Class
class Singleton {
private:
    static std::unique_ptr<Singleton> instance;  // The unique instance of the Singleton
    static std::once_flag initInstanceFlag;      // Flag to ensure instance is initialized only once

    // Private Constructor
    Singleton() {
        std::cout << "Singleton Constructor Called" << std::endl;
    }

    // Private Destructor
    ~Singleton() {
        std::cout << "Singleton Destructor Called" << std::endl;
    }

    // Delete copy constructor and assignment operator to prevent copying
    Singleton(const Singleton&) = delete;
    Singleton& operator=(const Singleton&) = delete;

public:
    // Static method to access the Singleton instance
    static Singleton* getInstance() {
        std::call_once(initInstanceFlag, []() {
            instance.reset(new Singleton);
        });
        return instance.get();
    }

    // Method to demonstrate functionality
    void showMessage() const {
        std::cout << "Hello from the Singleton instance!" << std::endl;
    }
};

// Initialize static members
std::unique_ptr<Singleton> Singleton::instance = nullptr;
std::once_flag Singleton::initInstanceFlag;

int main() {
    // Access the Singleton instance and call a method
    Singleton* s1 = Singleton::getInstance();
    s1->showMessage();

    // Verify that only one instance exists
    Singleton* s2 = Singleton::getInstance();
    if (s1 == s2) {
        std::cout << "Both instances are the same, Singleton works!" << std::endl;
    }

    return 0;
}
